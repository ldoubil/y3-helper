// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../vscode
//   ../../y3-helper
//   ../../https
//   ../../jsonc-parser

declare module 'y3-helper' {
    import * as vscode from 'vscode';
    export * as excel from 'y3-helper/editorTable/excel';
    export * as table from 'y3-helper/editorTable/editorTable';
    export * as language from 'y3-helper/editorTable/language';
    export * from 'y3-helper/tools';
    export * as const from 'y3-helper/constants';
    export { env } from 'y3-helper/env';
    export * as plugin from 'y3-helper/plugin';
    export let helper: vscode.ExtensionContext;
    /**
        * 拼接路径为 Uri
        * @returns
        */
    export function uri(base: vscode.Uri | string, ...paths: string[]): vscode.Uri;
    /**
        * 获取《Y3开发助手》插件的相对路径
        * @returns
        */
    export function extensionPath(...paths: string[]): vscode.Uri;
    export function setContext(ctx: vscode.ExtensionContext): void;
    /**
        * 打印内容，也会打印到日志窗口中
        * @param args 要打印的内容
        */
    export function print(...args: any[]): void;
    /**
        * 在VSCode中打开文件
        * @param uri 文件路径
        */
    export function open(uri: vscode.Uri | string): void;
    export function sleep(ms: number): Promise<void>;
}

declare module 'y3-helper/editorTable/excel' {
    import * as vscode from 'vscode';
    export function loadFile(uri: vscode.Uri, sheet?: number | string): Promise<(string | undefined)[][] | undefined>;
    export function init(): void;
}

declare module 'y3-helper/editorTable/editorTable' {
    import { Table } from "y3-helper/constants";
    import * as vscode from "vscode";
    import * as y3 from 'y3-helper';
    import { UnitData } from "y3-helper/editor_meta/unit";
    import { SoundData } from "y3-helper/editor_meta/sound";
    import { AbilityData } from "y3-helper/editor_meta/ability";
    import { DecorationData } from "y3-helper/editor_meta/decoration";
    import { DestructibleData } from "y3-helper/editor_meta/destructible";
    import { ItemData } from "y3-helper/editor_meta/item";
    import { ModifierData } from "y3-helper/editor_meta/modifier";
    import { ProjectileData } from "y3-helper/editor_meta/projectile";
    import { TechData } from "y3-helper/editor_meta/tech";
    export class FieldInfo {
            tableName: Table.NameCN;
            field: string;
            desc?: string;
            tips?: string;
            type?: string;
            constructor(tableName: Table.NameCN, field: string);
    }
    export function ready(): Promise<void>;
    type EditorData<N extends Table.NameCN> = N extends '单位' ? UnitData : N extends '声音' ? SoundData : N extends '技能' ? AbilityData : N extends '装饰物' ? DecorationData : N extends '可破坏物' ? DestructibleData : N extends '物品' ? ItemData : N extends '魔法效果' ? ModifierData : N extends '投射物' ? ProjectileData : N extends '科技' ? TechData : never;
    export class EditorObject<N extends Table.NameCN> {
            tableName: N;
            key: number;
            text?: string;
            uri?: vscode.Uri;
            constructor(tableName: N, key: number);
            toString(): string;
            /**
                * 获取对象的json数据语法树
                */
            get json(): y3.json.Json | undefined;
            get data(): EditorData<N>;
            /**
                * 获取对象的名称
                */
            get name(): string;
            getFieldInfo(field: string): y3.table.FieldInfo | undefined;
            listFields(): string[];
    }
    interface CreateOptions<N extends Table.NameCN> {
            /**
                * 新对象的名称，如果不填则使用默认名称
                */
            name?: string;
            /**
                * 新对象的key，如果不填则自动生成
                */
            key?: number;
            /**
                * 从哪个对象复制，如果不填则从模板复制为空对象
                */
            copyFrom?: number | EditorObject<N>;
            /**
                * 如果目标key已存在，是否覆盖
                */
            overwrite?: boolean;
    }
    export class EditorTable<N extends Table.NameCN> extends vscode.Disposable {
            name: N;
            uri: vscode.Uri;
            nameEN: {
                    readonly 单位: "unit";
                    readonly 装饰物: "decoration";
                    readonly 物品: "item";
                    readonly 技能: "ability";
                    readonly 魔法效果: "modifier";
                    readonly 投射物: "projectile";
                    readonly 科技: "technology";
                    readonly 可破坏物: "destructible";
                    readonly 声音: "sound";
            }[N];
            constructor(name: N);
            toString(): string;
            /**
                * 获取具体的对象
                * @param key 对象的key（一串数字）
                * @returns 对象
                */
            get(key: number): Promise<EditorObject<N> | undefined>;
            fetch(key: number): EditorObject<N> | undefined;
            /**
                * 获取这个类型下的所有对象的key
                * @returns 这个类型下的所有对象的key
                */
            getList(): Promise<number[]>;
            fetchList(): number[] | undefined;
            /**
                * 删除一个对象
                * @param key 对象的key
                */
            delete(key: number): Promise<void>;
            /**
                * 检查一个key是否可以使用
                * @param key 要检查的key
                * @param overwirte 是否允许覆盖已有的key，默认不允许
                * @returns
                */
            canUseKey(key: number, overwirte?: boolean): Promise<boolean>;
            /**
                * 生成一个可用的新key
                * @returns
                */
            makeNewKey(copyKey?: number): Promise<number>;
            /**
                * 创建一个对象
                * @param options 创建的参数
                * @returns
                */
            create(options?: CreateOptions<N>): Promise<EditorObject<N> | undefined>;
            /**
                * 获取对象在硬盘中的文件路径
                * @param key 对象的key
                * @returns 对象的路径
                */
            getUri(key: number): vscode.Uri;
            getFieldInfo(field: string): FieldInfo | undefined;
            listFields(): string[];
            onDidChange(callback: () => void): vscode.Disposable;
    }
    /**
        * 打开物编表
        * @param tableName 哪种表
        * @returns 表对象
        */
    export function openTable<N extends Table.NameCN>(tableName: N): EditorTable<N>;
    /**
        * 根据文件名获取文件对应的key
        * @param fileName 文件名
        * @returns 文件名对应的key
        */
    export function getFileKey(fileName: string): number | undefined;
    /**
        * 根据文件路径获取对象
        * @param uri 文件路径
        * @returns 对象
     */
    export function getObject(uri: vscode.Uri | string): Promise<EditorObject<Table.NameCN> | undefined>;
    /**
        * 获取所有的对象（速度比较慢）
        * @returns 所有对象
        */
    export function getAllObjects(): Promise<y3.table.EditorObject<"单位" | "声音" | "技能" | "装饰物" | "可破坏物" | "物品" | "魔法效果" | "投射物" | "科技">[]>;
    export function init(): void;
    export {};
}

declare module 'y3-helper/editorTable/language' {
    export function init(): void;
    export function ready(): Promise<void>;
    /**
        * 根据key获取中文文本
        */
    export function get(key: string | number): string | undefined;
    /**
        * 添加中文文本
        */
    export function set(key: string | number, value: string): Promise<void>;
    /**
        * 获取中文文本对应的key，如果不存在会新建
        * @param value 中文文本
        * @param preferNumber 如果可能，将key转换为数字
        */
    export function keyOf(value: string | number, preferNumber?: boolean): string | number;
}

declare module 'y3-helper/tools' {
    export { download } from 'y3-helper/tools/download';
    export { log } from 'y3-helper/tools/log';
    export * as fs from 'y3-helper/tools/fs';
    export * as json from 'y3-helper/tools/json';
}

declare module 'y3-helper/constants' {
    export namespace Table {
        const path: {
            readonly toCN: {
                readonly editorunit: "单位";
                readonly soundall: "声音";
                readonly abilityall: "技能";
                readonly editordecoration: "装饰物";
                readonly editordestructible: "可破坏物";
                readonly editoritem: "物品";
                readonly modifierall: "魔法效果";
                readonly projectileall: "投射物";
                readonly technologyall: "科技";
            };
            readonly fromCN: {
                readonly 单位: "editorunit";
                readonly 声音: "soundall";
                readonly 技能: "abilityall";
                readonly 装饰物: "editordecoration";
                readonly 可破坏物: "editordestructible";
                readonly 物品: "editoritem";
                readonly 魔法效果: "modifierall";
                readonly 投射物: "projectileall";
                readonly 科技: "technologyall";
            };
            readonly toName: {
                readonly editorunit: "unit";
                readonly soundall: "sound";
                readonly abilityall: "ability";
                readonly editordecoration: "decoration";
                readonly editordestructible: "destructible";
                readonly editoritem: "item";
                readonly modifierall: "modifier";
                readonly projectileall: "projectile";
                readonly technologyall: "technology";
            };
            readonly fromName: {
                readonly unit: "editorunit";
                readonly sound: "soundall";
                readonly ability: "abilityall";
                readonly decoration: "editordecoration";
                readonly destructible: "editordestructible";
                readonly item: "editoritem";
                readonly modifier: "modifierall";
                readonly projectile: "projectileall";
                readonly technology: "technologyall";
            };
        };
        const name: {
            readonly toCN: {
                readonly unit: "单位";
                readonly decoration: "装饰物";
                readonly item: "物品";
                readonly ability: "技能";
                readonly modifier: "魔法效果";
                readonly projectile: "投射物";
                readonly technology: "科技";
                readonly destructible: "可破坏物";
                readonly sound: "声音";
            };
            readonly fromCN: {
                readonly 单位: "unit";
                readonly 装饰物: "decoration";
                readonly 物品: "item";
                readonly 技能: "ability";
                readonly 魔法效果: "modifier";
                readonly 投射物: "projectile";
                readonly 科技: "technology";
                readonly 可破坏物: "destructible";
                readonly 声音: "sound";
            };
        };
        const type: {
            readonly toLuaType: {
                readonly 100000: "number";
                readonly 100001: "boolean";
                readonly 100002: "integer";
                readonly 100003: "string";
                readonly 100004: "Point";
                readonly 100006: "Unit";
                readonly 100010: "UnitKey";
                readonly 100011: "table";
                readonly 100014: "Ability";
                readonly 100025: "Player";
                readonly 100026: "UnitGroup";
                readonly 100027: "PlayerGroup";
                readonly 100031: "Item";
                readonly 100032: "ItemKey";
                readonly 100039: "AbilityKey";
                readonly 100263: "Mover";
            };
            readonly toName: {
                readonly 100000: "实数";
                readonly 100001: "布尔";
                readonly 100002: "整数";
                readonly 100003: "字符串";
                readonly 100004: "点";
                readonly 100006: "单位";
                readonly 100010: "单位类型";
                readonly 100011: "表";
                readonly 100014: "技能";
                readonly 100025: "玩家";
                readonly 100026: "单位组";
                readonly 100027: "玩家组";
                readonly 100031: "物品";
                readonly 100032: "物品类型";
                readonly 100039: "技能类型";
                readonly 100263: "运动器";
            };
        };
        type Path = keyof typeof path.toCN;
        type NameEN = keyof typeof name.toCN;
        type NameCN = keyof typeof name.fromCN;
        type TypeID = keyof typeof type.toLuaType;
    }
    export namespace CSV {
        const type: {
            readonly toPath: {
                readonly unit: "editorunit";
                readonly sound: "soundall";
                readonly ability: "abilityall";
                readonly model: "editormodel";
                readonly decoration: "editordecoration";
                readonly destructible: "editordestructible";
                readonly effect: "editoreffect";
                readonly icon: "editoricon";
                readonly item: "editoritem";
                readonly physics_object: "editorphysicsobject";
                readonly physics_object_logic: "editorphysicsobjectlogic";
                readonly modifier: "modifierall";
                readonly projectile: "projectileall";
                readonly store: "storeall";
                readonly technology: "technologyall";
            };
        };
        type Type = keyof typeof type.toPath;
    }
    export namespace Template {
        const path: {
            csv: {
                readonly unit: "./y3-helper/editor_table/csv/单位";
                readonly decoration: "./y3-helper/editor_table/csv/装饰物";
                readonly item: "./y3-helper/editor_table/csv/物品";
                readonly ability: "./y3-helper/editor_table/csv/技能";
                readonly modifier: "./y3-helper/editor_table/csv/魔法效果";
                readonly projectile: "./y3-helper/editor_table/csv/投射物";
                readonly technology: "./y3-helper/editor_table/csv/科技";
                readonly destructible: "./y3-helper/editor_table/csv/可破坏物";
                readonly sound: "./y3-helper/editor_table/csv/声音";
            };
        };
    }
}

declare module 'y3-helper/env' {
    import * as vscode from 'vscode';
    type EditorVersion = '1.0' | '2.0' | 'unknown';
    class Env {
        onDidChange: vscode.Event<void>;
        editorVersion: EditorVersion;
        editorUri?: vscode.Uri;
        editorExeUri?: vscode.Uri;
        mapUri?: vscode.Uri;
        scriptUri?: vscode.Uri;
        y3Uri?: vscode.Uri;
        projectUri?: vscode.Uri;
        editorTableUri?: vscode.Uri;
        csvTableUri?: vscode.Uri;
        excelUri?: vscode.Uri;
        ruleUri?: vscode.Uri;
        get tableTypeToCSVfolderPath(): {
            [key: string]: string;
        };
        get editorTablePath(): string;
        updateEditor(askUser?: boolean): Promise<void>;
        editorReady(askUser?: boolean): Promise<void>;
        updateMap(search: boolean, askUser: boolean): Promise<void>;
        mapReady(askUser?: boolean): Promise<void>;
        reload(): void;
    }
    export const env: Env;
    export {};
}

declare module 'y3-helper/plugin' {
    export function runAllPlugins(funcName: string): Promise<void>;
    export function init(): Promise<void>;
}

declare module 'y3-helper/editor_meta/unit' {
    export interface UnitData {
            /**
                * 躲避率(%)
                *
                * 单位躲避其他单位普通攻击的概率
                */
            dodge_rate: number;
            /**
                * 普攻类型
                */
            common_atk_type: any;
            /**
                * 模型缩放
                *
                * 对当前物体模型的缩放倍数，用于调整模型大小。
                */
            body_size: number;
            /**
                * 法术穿透
                *
                * 穿透敌人法术防御力。先计算固定穿透，再计算百分比穿透
                */
            pene_mag: number;
            /**
                * 智力
                *
                * 智力
                */
            intelligence_grow: number;
            /**
                * 小地图头像缩放
                *
                * 单位在小地图上的头像的缩放
                */
            mini_map_icon_scale: number;
            /**
                * x轴缩放
                */
            billboard_scale_x: number;
            /**
                * 法术穿透
                *
                * 穿透敌人法术防御力。先计算固定穿透，再计算百分比穿透
                */
            pene_mag_grow: number;
            /**
                * 默认行为
                *
                * 单位默认状态下会执行的行为
                */
            default_behaviour_type: any;
            /**
                * 头像
                *
                * 单位在游戏中显示的头像
                */
            icon: any;
            /**
                * 初始库存
                *
                * 单位作为商品的初始库存
                */
            init_stock: number;
            /**
                * 隐藏技能
                *
                * 隐藏技能，放在这类技能位中的技能将不会被显示在游戏中。
                */
            passive_ability_list: any[];
            /**
                * 转身速度
                *
                * 单位的转身速度
                */
            rotate_speed: number;
            /**
                * 敏捷
                *
                * 敏捷
                */
            agility_grow: number;
            /**
                * 商店范围
                */
            shop_range: number;
            /**
                * 移动类型
                *
                * 影响可用的可移动通道。
                */
            move_type: any;
            /**
                * 物理防御力
                *
                * 单位的物理防御力
                */
            defense_phy_grow: number;
            /**
                * 法术攻击力
                *
                * 单位的法术攻击力
                */
            attack_mag_grow: number;
            /**
                * 技能资源恢复
                *
                * 单位的每秒技能资源恢复数值
                */
            mp_rec_grow: number;
            /**
                * 菲涅尔指数
                */
            fresnel_exp: number;
            /**
                * 转向时移动速度系数
                */
            speed_ratio_in_turn: number;
            /**
                * 英雄技能
                *
                * 单位的英雄技能，可以通过学习升级，每次学习需要消耗一个技能点（升级时获取）。在默认UI界面中，会显示在后6个技能栏内，超出的不显示但依然生效。
                */
            hero_ability_list: any[];
            /**
                * 暴击伤害(%)
                *
                * 发生暴击时，造成的暴击伤害倍数
                */
            critical_dmg_grow: number;
            /**
                * 头顶名称显示方式
                *
                * 影响游戏内物体上方的文本显示内容。
                */
            bar_show_name: any;
            /**
                * 生命恢复
                *
                * 单位的每秒生命恢复数值
                */
            hp_rec_grow: number;
            /**
                * 最大生命值
                *
                * 单位的最大生命值
                */
            hp_max_grow: number;
            /**
                * 单位状态
                *
                * 进入游戏时，为单位附加的初始状态
                */
            ori_bits: any;
            /**
                * 启用圆盘阴影
                */
            is_open_disk_shadow: boolean;
            /**
                * 可研发科技
                *
                * 这些科技，可以在单位身上研发、升级。
                */
            research_techs: any[];
            /**
                * 最大技能资源
                *
                * 单位的最大技能资源
                */
            mp_max_grow: number;
            /**
                * 主属性
                *
                * 英雄单位的主要属性，一般主属性的提升会对英雄有额外加成
                */
            main_attr: any;
            /**
                * 物理穿透
                *
                * 穿透敌人物理防御力。先计算固定穿透，再计算百分比穿透
                */
            pene_phy_grow: number;
            /**
                * 尸体消失时间
                *
                * 尸体消失时间
                */
            keep_dead_body_time: number;
            /**
                * 法术攻击力
                *
                * 单位的法术攻击力
                */
            attack_mag: number;
            /**
                * 出售列表
                *
                * 单位作为商店时的出售列表
                */
            sell_list: any;
            /**
                * 生命恢复
                *
                * 单位的每秒生命恢复数值
                */
            hp_rec: number;
            /**
                * 技能资源条颜色
                *
                * 该单位用来释放技能的能量的颜色
                */
            mp_color: any;
            /**
                * 技能资源恢复
                *
                * 单位的每秒技能资源恢复数值
                */
            mp_rec: number;
            /**
                * 求救距离
                */
            rescue_seeker_distance: number;
            /**
                * nil
                */
            vision_sector_rng_grow: number;
            /**
                * 伤害减免(%)
                *
                * 百分比降低受到的伤害
                */
            dmg_reduction: number;
            /**
                * 移动速度
                *
                * 单位每秒移动的距离。
                */
            ori_speed: number;
            /**
                * 购买开始时间
                *
                * 单位作为商品的可购买时间(游戏开始多久后可以购买）
                */
            start_rft: number;
            /**
                * 悬浮信息显示
                *
                * 开启后鼠标悬浮到单位身上时会显示单位名称和等级的文本框
                */
            show_y3_extra_info: boolean;
            /**
                * 移动速度
                *
                * 单位每秒移动的距离。
                */
            ori_speed_grow: number;
            /**
                * 特殊状态
                *
                * 特殊状态下会播放的动画
                */
            special_idle_anim: string;
            /**
                * 物理穿透(%)
                *
                * 百分比穿透敌人物理防御力。先计算固定穿透，再计算百分比穿透
                */
            pene_phy_ratio: number;
            /**
                * 防御类型
                *
                * 单位的护甲类型，具体效果可在游戏规则中查看
                */
            armor_type: any;
            /**
                * 物理吸血(%)
                *
                * 造成物理伤害后可以恢复自身生命值
                */
            vampire_phy: number;
            /**
                * 简易普攻
                */
            simple_common_atk: any;
            /**
                * 物理攻击力
                *
                * 单位的物理攻击力
                */
            attack_phy: number;
            /**
                * 攻击间隔
                */
            attack_interval_grow: number;
            /**
                * 是否预览血条
                */
            need_preview_billboard: boolean;
            /**
                * 被治疗效果提升(%)
                *
                * 提高接受治疗时受到的治疗效果
                */
            heal_effect_grow: number;
            /**
                * 所有伤害加成(%)
                *
                * 百分比提高造成的伤害
                */
            extra_dmg: number;
            /**
                * 转向补正
                */
            angle_tolerance: number;
            /**
                * 出售获得资源
                *
                * 单位作为商品的出售获得资源
                */
            sell_res_list: any[];
            /**
                * 是否开启透视
                */
            is_open_Xray: boolean;
            /**
                * 敏捷
                *
                * 敏捷
                */
            agility: number;
            /**
                * 小地图头像
                *
                * 单位在小地图上的头像
                */
            mini_map_icon: any;
            /**
                * y轴缩放
                */
            billboard_scale_y: number;
            /**
                * 死亡
                *
                * 死亡状态下会播放的动画
                */
            die_anim: string;
            /**
                * 标签
                *
                * 用于对物体的分类处理。为单位贴上标签后可以对其进行更方便的关系，例如编写游戏逻辑：杀死所有拥有XX标签的单位
                */
            tags: any[];
            /**
                * 被治疗效果提升(%)
                *
                * 提高接受治疗时受到的治疗效果
                */
            healing_effect_grow: number;
            /**
                * 视野类型
                *
                * 单位与战争迷雾相关的一些属性
                */
            view_type: any;
            /**
                * 暴击伤害(%)
                *
                * 发生暴击时，造成的暴击伤害倍数
                */
            critical_dmg: number;
            /**
                * 强制显示在小地图
                *
                * 勾选后单位将强制显示在小地图上，无视战争阴影
                */
            force_show_on_mini_map: boolean;
            /**
                * 圆盘阴影大小
                */
            disk_shadow_size: number;
            /**
                * 物理攻击力
                *
                * 单位的物理攻击力
                */
            attack_phy_grow: number;
            /**
                * nil
                */
            collision_radius_2: number;
            /**
                * 死亡后是否销毁单位
                *
                * 死亡后是否会把单位完全销毁。（会在尸体消失时间结束后进行销毁，销毁后将无法再获取单位相关信息）
                */
            destroy_after_die: boolean;
            /**
                * 物理主控行走速度
                */
            cc_walk_speed: number;
            /**
                * 玩家颜色缩放
                */
            role_color_scale: number;
            /**
                * 最大技能资源
                *
                * 单位的最大技能资源
                */
            mp_max: number;
            /**
                * 法术防御力
                *
                * 单位的法术防御力
                */
            defense_mag_grow: number;
            /**
                * 物理穿透(%)
                *
                * 百分比穿透敌人物理防御力。先计算固定穿透，再计算百分比穿透
                */
            pene_phy_ratio_grow: number;
            /**
                * 物理主控跳跃高度
                */
            cc_jump_height: number;
            /**
                * 名称
                *
                * 当前单位的名称
                */
            name: string;
            /**
                * 描述
                *
                * 单位的介绍说明，用在编辑器内和游戏内的Tips显示上
                */
            description: string;
            /**
                * 扇形视野夜晚夹角
                *
                * 单位在夜晚拥有的扇形视野夹角。
                */
            vision_sector_angle_night: number;
            /**
                * 是否敌友方显示不同头像
                */
            separate_enemy_icon: boolean;
            /**
                * 单位状态列表
                */
            state_list: any[];
            /**
                * 使用简易小地图头像
                *
                * 简易小地图头像的表现为一个小点。简易小地图头像的绘制性能消耗相比普通小地图头像更小，如果地图上会出现大量的该类型单位，建议使用简易小地图头像。
                */
            use_simple_mini_map_icon: boolean;
            /**
                * 启用补光效果
                */
            use_virtual_light: boolean;
            /**
                * 攻击范围
                */
            attack_range_grow: number;
            /**
                * ID
                *
                * 单位的唯一表示
                */
            key: number;
            /**
                * 最大生命值
                *
                * 单位的最大生命值
                */
            hp_max: number;
            /**
                * 物理
                */
            physics_composite: any;
            /**
                * 法术吸血(%)
                *
                * 造成法术伤害后可以恢复自身生命值
                */
            vampire_mag: number;
            /**
                * 法术穿透(%)
                *
                * 百分比穿透敌人法术防御力。先计算固定穿透，再计算百分比穿透
                */
            pene_mag_ratio_grow: number;
            /**
                * nil
                */
            is_x_offset: boolean;
            /**
                * 出售阵营参数
                */
            shop_camp_args: any;
            /**
                * 菲涅尔颜色
                */
            fresnel_color: any;
            /**
                * 启用菲涅尔效果
                */
            use_fresnel: boolean;
            /**
                * 碰撞格点
                */
            collision_points: any;
            /**
                * nil
                */
            width_offset: number;
            /**
                * 物理主控跑步速度
                */
            cc_run_speed: number;
            /**
                * 动画状态名
                */
            anim_state_name: string;
            /**
                * 是否应用玩家颜色光圈
                */
            is_apply_role_color: boolean;
            /**
                * 单位初始状态
                */
            state_init: any;
            /**
                * 扇形视野白天夹角
                *
                * 单位在白天拥有的扇形视野夹角。
                */
            vision_sector_angle_day: number;
            /**
                * 攻击速度(%)
                *
                * 攻击速度(倍数)
                */
            attack_speed_grow: number;
            /**
                * 命中率(%)
                *
                * 单位普通攻击命中其他单位的概率
                */
            hit_rate: number;
            /**
                * 真实视野
                *
                * 单位所能侦测到隐身单位的范围
                */
            vision_true: number;
            /**
                * 声音事件列表
                */
            sound_event_list: any[];
            /**
                * 救援类型
                */
            rescuer_type: any;
            /**
                * 玩家自定义
                */
            kv: any;
            /**
                * 真实视野
                *
                * 单位所能侦测到隐身单位的范围
                */
            vision_true_grow: number;
            /**
                * 无法移动时仍然保持目标
                *
                * 该字段未勾选时，在目标移动出自身的警戒范围后，且自身不能移动时，会立即开始寻找一个新的攻击目标。多用于定点守卫。
                */
            keep_target: boolean;
            /**
                * 所有伤害加成(%)
                *
                * 百分比提高造成的伤害
                */
            extra_dmg_grow: number;
            /**
                * 物理穿透
                *
                * 穿透敌人物理防御力。先计算固定穿透，再计算百分比穿透
                */
            pene_phy: number;
            /**
                * 命中率(%)
                *
                * 单位普通攻击命中其他单位的概率
                */
            hit_rate_grow: number;
            /**
                * 是否开启描边
                */
            is_open_outline_pass: boolean;
            /**
                * 被治疗效果加成(%)
                *
                * 提高接受治疗时受到的治疗效果
                */
            healing_effect: number;
            /**
                * 可移动通道
                *
                * 对单位移动类型的补充，决定单位究竟是在哪些通道移动。任意通道被碰撞阻挡该单位均无法通过。
                */
            move_limitation: any;
            /**
                * nil
                */
            height_offset: number;
            /**
                * 悬浮信息显示内容
                */
            y3_extra_info_show_type: any;
            /**
                * 单位分类
                *
                * 单位类型决定了这类单位的一些特性，包括其可编辑的属性和某些属性的默认值。
                */
            type: any;
            /**
                * 是否有技能资源条
                *
                * 该单位是否有可以用来释放技能的能量
                */
            has_mp: boolean;
            /**
                * 资源消耗
                *
                * 单位作为建筑时建造会消耗的资源
                */
            build_res_cost_list: any[];
            /**
                * 应用科技
                *
                * 单位的可应用科技（会受到该科技的影响）
                */
            affect_techs: any[];
            /**
                * 出售阵营类型
                */
            shop_sell_type: any;
            /**
                * 夜晚视野
                *
                * 单位在夜晚可以看到（驱散战争迷雾）的范围
                */
            vision_night: number;
            /**
                * 物品栏
                *
                * 单位的物品栏格数
                */
            bar_slot_size: number;
            /**
                * 商店
                */
            shop_edit: any;
            /**
                * 通用技能
                *
                * 单位的通用技能。在默认UI界面中，会显示在前6个技能栏内，超出的不显示但依然生效。
                */
            common_ability_list: any[];
            /**
                * 是否做为商店
                *
                * 开启后单位可以作为商店编辑出售的物品
                */
            is_shop: boolean;
            /**
                * 购买所需资源
                *
                * 单位作为商品的购买所需资源
                */
            buy_res_list: any[];
            /**
                * 编辑器后缀
                *
                * 给使用编辑器的用户看的备注，无实际作用
                */
            suffix: string;
            /**
                * 静态碰撞跟随面向
                *
                * 仅对建筑类型单位生效。勾选时，单位改变朝向时会使静态碰撞跟随旋转。
                */
            collision_box_turning_enable: boolean;
            /**
                * 冷却缩减(%)
                *
                * 单位技能进入cd时减少部分冷却时间
                */
            cd_reduce_grow: number;
            /**
                * 库存恢复间隔
                *
                * 单位作为商品的库存恢复间隔
                */
            refresh_interval: number;
            /**
                * 是否显示血条刻度
                *
                * 单位血条上是否会出现刻度线
                */
            bar_show_scale: boolean;
            /**
                * 攻击类型
                *
                * 单位的攻击类型，具体效果可在游戏规则中查看
                */
            attack_type: any;
            /**
                * 求救类型
                */
            rescue_seeker_type: any;
            /**
                * 编辑简易普攻
                */
            jump_to_display: any;
            /**
                * 普通攻击
                *
                * 单位的普通攻击，唯一，单位对目标普通攻击时释放的技能
                */
            common_atk: any;
            /**
                * 法术防御力
                *
                * 单位的法术防御力
                */
            defense_mag: number;
            /**
                * UID
                */
            uid: string;
            /**
                * 移动类型
                *
                * 单位的移动类型，决定单位究竟是在地面移动还是在空中移动。
                */
            move_channel: any;
            /**
                * 掉落物品
                *
                * 单位死亡后会掉落的物品
                */
            drop_items_tuple: any[];
            /**
                * 取消警戒范围(AI)
                *
                * 单位的取消警戒范围(AI)，敌方离开取消警戒范围后会不再主动攻击敌方
                */
            cancel_alarm_range: number;
            /**
                * 警戒范围(AI)
                *
                * 单位的警戒范围(AI)
                */
            alarm_range: number;
            /**
                * 背包栏
                *
                * 单位的背包栏格数
                */
            pkg_slot_size: number;
            /**
                * 力量
                *
                * 力量
                */
            strength_grow: number;
            /**
                * 最大平衡角度
                */
            max_balance_angle: number;
            /**
                * 经验
                *
                * 单位被敌方击杀后，敌方可获得的经验
                */
            reward_exp: number;
            /**
                * 救援后返回
                */
            rescue_finish_return: boolean;
            /**
                * 预览血量
                */
            preview_billboard_health_value: number;
            /**
                * 单位血条高度偏移
                */
            billboard_height_offset: number;
            /**
                * 离地高度
                *
                * 单位的离地高度
                */
            model_height: number;
            /**
                * 前置条件
                *
                * 训练、购买、建造该单位的前置条件
                */
            precondition_list: any[];
            /**
                * 白天视野
                *
                * 单位在白天可以看到（驱散战争迷雾）的范围
                */
            vision_rng_grow: number;
            /**
                * 攻击间隔
                */
            attack_interval: number;
            /**
                * 移动动画播放速率系数
                *
                * 单位移动时动画的播放速度
                */
            standard_walk_rate: number;
            /**
                * nil
                */
            vision_sector_angle_night_grow: number;
            /**
                * 力量
                *
                * 力量
                */
            strength: number;
            /**
                * nil
                */
            vision_sector_angle_day_grow: number;
            /**
                * nil
                */
            vision_sector_night_grow: number;
            /**
                * 白天视野
                *
                * 单位在白天可以看到（驱散战争迷雾）的范围
                */
            vision_rng: number;
            /**
                * 碰撞半径
                *
                * 碰撞动态半径，每50为1个标准格。
                */
            dynamic_collision_r: number;
            /**
                * 暴击率(%)
                *
                * 单位普通攻击有概率造成额外伤害
                */
            critical_chance_grow: number;
            /**
                * nil
                */
            is_z_offset: boolean;
            /**
                * 菲涅尔强度
                */
            fresnel_emissive_color_strength: number;
            /**
                * 物理吸血(%)
                *
                * 造成物理伤害后可以恢复自身生命值
                */
            vampire_phy_grow: number;
            /**
                * 物理防御力
                *
                * 单位的物理防御力
                */
            defense_phy: number;
            /**
                * 等级
                *
                * 单位的默认等级
                */
            level: number;
            /**
                * 血条显示模式
                *
                * 该单位在游戏内的血条的显示时机
                */
            blood_show_type: any;
            /**
                * 模型不透明度
                */
            model_opacity: number;
            /**
                * 基础材质变色
                */
            base_tint_color: any;
            /**
                * 血条样式
                *
                * 该单位在游戏内的血条样式
                */
            blood_bar: any;
            /**
                * 材质颜色叠加类型
                */
            base_color_mod: any;
            /**
                * 模型
                *
                * 当前单位所使用的的模型
                */
            model: any;
            /**
                * 建造时间（秒）
                */
            build_time: number;
            /**
                * 伤害减免(%)
                *
                * 百分比降低受到的伤害
                */
            dmg_reduction_grow: number;
            /**
                * 技能资源名称
                *
                * 该单位用来释放技能的能量的名称
                */
            mp_key: string;
            /**
                * 是否在小地图显示
                *
                * 单位是否会在小地图上显示出来
                */
            is_mini_map_show: boolean;
            /**
                * 暴击率(%)
                *
                * 单位普通攻击有概率造成额外伤害
                */
            critical_chance: number;
            /**
                * 默认状态
                *
                * 默认状态下会播放的动画
                */
            idle_anim: string;
            /**
                * 无法反击时会逃跑
                *
                * 当单位受到伤害且自身无法反击时，会向伤害来源的相反方向移动一段距离，仅在警戒状态下生效
                */
            can_flee: boolean;
            /**
                * 物理主控加速速率
                */
            cc_move_acc_rate: number;
            /**
                * 物理主控加速度
                */
            cc_move_acc: number;
            /**
                * 行走
                *
                * 行走状态下会播放的动作
                */
            walk_anim: string;
            /**
                * 冷却缩减(%)
                *
                * 单位技能进入cd时减少部分冷却时间
                */
            cd_reduce: number;
            /**
                * 求救间隔
                */
            rescue_seeker_interval: number;
            /**
                * 敌方小地图头像
                */
            enemy_mini_map_icon: any;
            /**
                * 夜晚视野
                *
                * 单位在夜晚可以看到（驱散战争迷雾）的范围
                */
            vision_night_grow: number;
            /**
                * 被治疗效果加成(%)
                *
                * 提高接受治疗时受到的治疗效果
                */
            heal_effect: number;
            /**
                * 攻击速度(%)
                *
                * 单位的攻击速度百分比，局内显示的实际攻速为:1/单位当前普通攻击技能冷却时间*攻击速度
                */
            attack_speed: number;
            /**
                * 扇形视野夜晚半径
                *
                * 单位在夜晚拥有的扇形视野半径。
                */
            vision_sector_night: number;
            /**
                * 智力
                *
                * 智力
                */
            intelligence: number;
            /**
                * 攻击范围
                */
            attack_range: number;
            /**
                * 扇形视野白天半径
                *
                * 单位在白天拥有的扇形视野半径。
                */
            vision_sector_rng: number;
            /**
                * 法术吸血(%)
                *
                * 造成法术伤害后可以恢复自身生命值
                */
            vampire_mag_grow: number;
            /**
                * 最大库存
                *
                * 单位作为商品的最大库存
                */
            max_stock: number;
            /**
                * 躲避率(%)
                *
                * 单位躲避其他单位普通攻击的概率
                */
            dodge_rate_grow: number;
            /**
                * 允许反击范围
                */
            counterattack_range: number;
            /**
                * 头顶名称字体
                *
                * 在单位头顶显示的文字字体
                */
            billboard_name_font: any;
            /**
                * 是否启用基础材质变色
                */
            use_base_tint_color: boolean;
            /**
                * 升级列表
                */
            build_upgrade_list: any[];
            /**
                * 法术穿透(%)
                *
                * 百分比穿透敌人法术防御力。先计算固定穿透，再计算百分比穿透
                */
            pene_mag_ratio: number;
    }
}

declare module 'y3-helper/editor_meta/sound' {
    export interface SoundData {
            /**
                * UID
                */
            uid: string;
            /**
                * 音量
                */
            volume: number;
            /**
                * 描述
                */
            description: string;
            /**
                * 2D声音
                */
            sound_id: any;
            /**
                * 最小距离
                */
            min_dist: number;
            /**
                * 淡出时间
                */
            fade_out_time: number;
            /**
                * 播放速度
                */
            speed: number;
            /**
                * 最大距离
                */
            max_dist: number;
            /**
                * 总时间
                */
            total_time: number;
            /**
                * 标签
                */
            tags: any[];
            /**
                * 图标
                */
            icon: any;
            /**
                * 2D声音
                */
            sound_id_list: any[];
            /**
                * 编辑器后缀
                */
            suffix: string;
            /**
                * 分组
                */
            group: number;
            /**
                * 玩家自定义
                */
            kv: any;
            /**
                * 名称
                */
            name: string;
            /**
                * 优先级
                */
            priority: number;
            /**
                * 类型
                */
            type: number;
            /**
                * ID
                */
            key: number;
            /**
                * 淡入时间
                */
            fade_in_time: number;
    }
}

declare module 'y3-helper/editor_meta/ability' {
    export interface AbilityData {
            /**
                * 物品
                */
            type_priority_item: number;
            /**
                * 施法开始可以被打断
                */
            can_ps_interrupt: boolean;
            /**
                * 阵营
                */
            filter_condition_camp: any;
            /**
                * 敌人
                */
            camp_priority_enemy: number;
            /**
                * 可破坏物
                */
            type_priority_destructible: number;
            /**
                * ID
                */
            key: number;
            /**
                * 近战
                */
            is_meele: boolean;
            /**
                * 准备特效
                */
            sp_sfx_list: any[];
            /**
                * 施法完成可以被打断
                */
            can_bs_interrupt: boolean;
            /**
                * 连续施法
                */
            collection_continuously: boolean;
            /**
                * 立刻施法
                */
            is_immediate: boolean;
            /**
                * 宽度
                */
            arrow_width: string[];
            /**
                * 长度
                */
            arrow_length: string[];
            /**
                * 消耗生命是否致死
                */
            cost_hp_can_die: boolean;
            /**
                * 生命值消耗
                */
            ability_hp_cost: string[];
            /**
                * 魔法书技能
                */
            magicbook_list: any[];
            /**
                * 受击特效
                */
            hit_sfx_list: any[];
            /**
                * 施法引导
                */
            ability_prepare_time: number;
            /**
                * 单位移动类型
                */
            filter_condition_move_channel_type: any;
            /**
                * 前摇特效
                */
            ps_sfx_list: any[];
            /**
                * 攻击范围预览特效
                */
            building_attack_range_sfx: any;
            /**
                * 可破坏物标签要求
                */
            collection_destructible_tags: any;
            /**
                * 编辑器后缀
                */
            suffix: string;
            /**
                * 声音事件列表
                */
            sound_event_list: any[];
            /**
                * 移动会对技能产生影响
                */
            influenced_by_move: boolean;
            /**
                * 生命不足能否施放
                */
            can_cast_when_hp_insufficient: boolean;
            /**
                * 玩家自定义
                */
            kv: any;
            /**
                * 英雄
                */
            type_priority_hero: number;
            /**
                * 自动拾取
                */
            auto_pick: boolean;
            /**
                * 消耗生命值施放
                */
            can_cost_hp: boolean;
            /**
                * UID
                */
            uid: string;
            /**
                * 施法引导可以被打断
                */
            can_prepare_interrupt: boolean;
            /**
                * 玩家属性消耗
                */
            player_props_cost: any[];
            /**
                * 可以缓存
                */
            can_cache: boolean;
            /**
                * 名称
                */
            name: string;
            /**
                * 技能消耗
                */
            ability_cost: string[];
            /**
                * 采集动画
                */
            collection_animation: string;
            /**
                * 击中音效
                */
            hit_sound_effect: any[];
            /**
                * 技能释放类型
                */
            ability_cast_type: any;
            /**
                * 自动施法
                */
            is_autocast: boolean;
            /**
                * 充能时间
                */
            ability_stack_cd: string[];
            /**
                * 结束音效
                */
            end_sound_effect: any[];
            /**
                * 前置条件
                *
                * 训练、购买、建造该单位的前置条件
                */
            precondition_list: any[];
            /**
                * 生物
                */
            type_priority_creature: number;
            /**
                * 可以超出范围施法
                */
            release_immediately_out_of_range: boolean;
            /**
                * 技能伤害值
                */
            ability_damage: string[];
            /**
                * 角度
                */
            sector_angle: string[];
            /**
                * 是否转身
                */
            need_turn_to_target: boolean;
            /**
                * 攻击范围预览
                */
            show_building_attack_range: boolean;
            /**
                * 建造方式
                */
            ability_build_subtype: any;
            /**
                * 显示准备倒计时
                */
            sp_count_down: boolean;
            /**
                * 冷却时间
                */
            cold_down_time: string[];
            /**
                * 圆形半径
                */
            circle_radius: string[];
            /**
                * 是否为蓄力技能
                */
            is_charge_ability: boolean;
            /**
                * 建造单位
                */
            build_list: any[];
            /**
                * 前摇音效
                */
            ps_sound_effect: any[];
            /**
                * 结束特效
                */
            end_sfx_list: any[];
            /**
                * 后摇特效
                */
            bs_sfx_list: any[];
            /**
                * 循环播放动画
                */
            collection_animation_loop: boolean;
            /**
                * 建筑
                */
            type_priority_building: number;
            /**
                * 己方
                */
            camp_priority_self: number;
            /**
                * 建造角度
                */
            build_rotate: number;
            /**
                * 特殊筛选
                */
            target_attribute: any;
            /**
                * 攻击命令触发自动施法
                */
            can_autocast_when_attack_target: boolean;
            /**
                * 扇形半径
                */
            sector_radius: string[];
            /**
                * 物品标签要求
                */
            filter_item_tags: any;
            /**
                * 描述
                */
            description: string;
            /**
                * 单位排除标签
                */
            forbid_unit_tags: any;
            /**
                * 单位标签要求
                */
            filter_unit_tags: any;
            /**
                * 准备音效
                */
            sp_sound_effect: any[];
            /**
                * 施法特效
                */
            cst_sfx_list: any[];
            /**
                * 图标
                */
            ability_icon: any;
            /**
                * 施法音效
                */
            cst_sound_effect: any[];
            /**
                * 技能受冷却影响
                */
            influenced_by_cd_reduce: boolean;
            /**
                * 类型
                */
            filter_condition_type: any;
            /**
                * 标签
                */
            tags: any[];
            /**
                * 释放范围
                */
            ability_cast_range: string[];
            /**
                * 施法打断范围
                */
            ability_break_cast_range: string[];
            /**
                * 中立
                */
            camp_priority_neutral: number;
            /**
                * 允许学习等级
                */
            required_level: any;
            /**
                * 指示器类型
                */
            sight_type: any;
            /**
                * 施法完成
                */
            ability_bw_point: number;
            /**
                * 技能影响范围
                */
            ability_damage_range: string[];
            /**
                * 最大充能数
                */
            ability_max_stack_count: string[];
            /**
                * 采集获得量
                */
            pick_count: number;
            /**
                * 技能可以打断其他技能
                */
            can_interrupt_others: boolean;
            /**
                * 施法开始
                */
            ability_cast_point: number;
            /**
                * 施法出手
                */
            ability_channel_time: number;
            /**
                * 技能最大等级
                */
            ability_max_level: number;
            /**
                * 施法出手可以被打断
                */
            can_cast_interrupt: boolean;
            /**
                * 队友
                */
            camp_priority_friend: number;
            /**
                * 编辑技能效果
                */
            art_resource_btn: any;
            /**
                * 后摇音效
                */
            bs_sound_effect: any[];
    }
}

declare module 'y3-helper/editor_meta/decoration' {
    export interface DecorationData {
            /**
                * UID
                */
            uid: string;
            /**
                * 材质变色强度
                */
            material_color_intensity: number;
            /**
                * 高度图
                */
            collision_height: any;
            /**
                * 启用补光效果
                */
            use_virtual_light: boolean;
            /**
                * 模型
                */
            model: any;
            /**
                * 暂未配置55
                */
            icon: any;
            /**
                * 效果编辑按钮
                */
            effect_button: any;
            /**
                * 挂接物列表
                */
            attach_models: any;
            /**
                * 接收贴花
                */
            receive_decal: boolean;
            /**
                * 启用菲涅尔效果
                */
            use_fresnel: boolean;
            /**
                * 碰撞盒
                */
            collision_box: any;
            /**
                * 材质颜色叠加类型
                */
            base_color_mod: any;
            /**
                * 不透明度
                */
            material_alpha: number;
            /**
                * 菲涅尔指数
                */
            fresnel_exp: number;
            /**
                * 菲涅尔强度
                */
            fresnel_emissive_color_strength: number;
            /**
                * 名称
                */
            name: string;
            /**
                * 菲涅尔颜色
                */
            fresnel_color: any;
            /**
                * 是否产生阴影
                */
            cast_shadow: boolean;
            /**
                * nil
                */
            enable_camera_collision: boolean;
            /**
                * 可通行
                */
            use_physics: boolean;
            /**
                * 遮挡透视
                */
            enable_occlusion_perspective: boolean;
            /**
                * 碰撞格点
                */
            collision_points: any;
            /**
                * 基础材质变色
                */
            base_tint_color: any;
            /**
                * 基础材质变色
                */
            material_color: any;
            /**
                * 编辑器后缀
                */
            suffix: string;
            /**
                * 模型不透明度
                */
            model_opacity: number;
            /**
                * ID
                */
            key: number;
            /**
                * 缩放
                */
            scale: number;
            /**
                * 玩家自定义
                */
            kv: any;
            /**
                * 获得特效列表
                */
            effect_list: any;
            /**
                * 是否启用基础材质变色
                */
            use_base_tint_color: boolean;
            /**
                * 材质变化
                */
            material_change: any;
            /**
                * 描述
                */
            description: string;
    }
}

declare module 'y3-helper/editor_meta/destructible' {
    export interface DestructibleData {
            /**
                * UID
                */
            uid: string;
            /**
                * 小地图 - 显示
                */
            show_on_mini_map: boolean;
            /**
                * 资源名称
                */
            source_desc: string;
            /**
                * 模型缩放
                *
                * 对当前物体模型的缩放倍数，用于调整模型大小。
                */
            body_size: number;
            /**
                * 可被攻击
                */
            is_attacked: boolean;
            /**
                * 死亡时销毁
                */
            destroy_on_die: boolean;
            /**
                * 玩家属性资源
                */
            source_player_prop: any;
            /**
                * 启用补光效果
                */
            use_virtual_light: boolean;
            /**
                * ID
                */
            key: number;
            /**
                * 生命值
                */
            hp_max: number;
            /**
                * 图标
                */
            icon: any;
            /**
                * 资源初始数量
                */
            source_nums_init: number;
            /**
                * 持续特效列表
                */
            effect_list: any;
            /**
                * 声音事件列表
                */
            sound_event_list: any[];
            /**
                * 接收贴花
                */
            receive_decal: boolean;
            /**
                * 菲涅尔强度
                */
            fresnel_emissive_color_strength: number;
            /**
                * 资源类型
                */
            source_type: any;
            /**
                * 是否可通行
                */
            passable: boolean;
            /**
                * nil
                */
            dead_height_box_data: string;
            /**
                * 资源回复间隔
                */
            source_refresh_interval: number;
            /**
                * 遮挡透视
                */
            enable_occlusion_perspective: boolean;
            /**
                * 启用菲涅尔效果
                */
            use_fresnel: boolean;
            /**
                * 材质颜色叠加类型
                */
            base_color_mod: any;
            /**
                * 玩家自定义
                */
            kv: any;
            /**
                * 死亡特效列表
                */
            die_effect_list: any;
            /**
                * 描述
                */
            description: string;
            /**
                * 不透明度
                */
            material_alpha: number;
            /**
                * 菲涅尔指数
                */
            fresnel_exp: number;
            /**
                * 基础材质变色
                */
            base_tint_color: any;
            /**
                * 物品类型
                */
            source_item: any;
            /**
                * 小地图 - 颜色
                */
            mini_map_color: any;
            /**
                * 可被采集
                */
            is_collected: boolean;
            /**
                * 材质变色强度
                */
            material_color_intensity: number;
            /**
                * 基础材质变色
                */
            material_color: any;
            /**
                * 物品标签
                *
                * 用于对物体的分类处理。为单位贴上标签后可以对其进行更方便的关系，例如编写游戏逻辑：杀死所有拥有XX标签的单位
                */
            tags: any[];
            /**
                * 菲涅尔颜色
                */
            fresnel_color: any;
            /**
                * 可被选中
                */
            is_selected: boolean;
            /**
                * 默认角度
                */
            collision_points_dead: any;
            /**
                * 可被作为技能目标
                */
            is_ability_target: boolean;
            /**
                * 资源回复数量
                */
            source_refresh_count: number;
            /**
                * 模型
                */
            model: any;
            /**
                * 默认角度
                */
            collision_points_alive: any;
            /**
                * 资源最大数量
                */
            source_nums_max: number;
            /**
                * 编辑器后缀
                */
            suffix: string;
            /**
                * 模型不透明度
                */
            model_opacity: number;
            /**
                * 死亡销毁延迟
                */
            destroy_delay: number;
            /**
                * 名称
                */
            name: string;
            /**
                * 资源耗尽时死亡
                */
            die_on_source_run_out: boolean;
            /**
                * nil
                */
            alive_height_box_data: string;
            /**
                * 是否启用基础材质变色
                */
            use_base_tint_color: boolean;
            /**
                * 材质变化
                */
            material_change: any;
            /**
                * 默认角度
                */
            collision_box: any;
    }
}

declare module 'y3-helper/editor_meta/item' {
    export interface ItemData {
            /**
                * UID
                */
            uid: string;
            /**
                * 掉落后时间到期消失
                */
            delete_on_discard: boolean;
            /**
                * 可以遗弃
                *
                * 玩家是否可以将物品丢弃到地面
                */
            discard_enable: boolean;
            /**
                * 合成素材
                *
                * 合成这件物品所需要的材料，拥有所有合成原料后会自动合成该物品
                */
            compose_list: any[];
            /**
                * 启用补光效果
                */
            use_virtual_light: boolean;
            /**
                * ID
                *
                * 物品的ID
                */
            key: number;
            /**
                * 购买开始时间
                *
                * 游戏开始后多长时间才能购买该类物品
                */
            start_rft: number;
            /**
                * 前置条件
                *
                * 训练、购买、建造该单位的前置条件
                */
            precondition_list: any[];
            /**
                * 图标
                *
                * 物品的头像
                */
            icon: any;
            /**
                * 开启碰撞
                */
            disable_overlapping: boolean;
            /**
                * 初始库存
                *
                * 物品作为商品时在商店中的初始可购买数
                */
            init_stock: number;
            /**
                * 特效列表
                */
            effect_list: any;
            /**
                * 声音事件列表
                */
            sound_event_list: any[];
            /**
                * 堆叠类型
                *
                * 物品的堆叠或者充能逻辑。
                */
            stack_type: any;
            /**
                * 库存恢复间隔
                *
                * 当前物品作为商品时，商店库存增加的间隔时间
                */
            refresh_interval: number;
            /**
                * 主动技能
                *
                * 使用该物品的时释放的主动技能
                */
            attached_ability: any;
            /**
                * 启用菲涅尔效果
                */
            use_fresnel: boolean;
            /**
                * 消失时间
                *
                * 掉落在地面上的消失时间
                */
            drop_stay_time: number;
            /**
                * 菲涅尔强度
                */
            fresnel_emissive_color_strength: number;
            /**
                * 被动技能
                */
            attached_passive_abilities: any[];
            /**
                * 描述
                *
                * 物品的描述和介绍
                */
            description: string;
            /**
                * 菲涅尔颜色
                */
            fresnel_color: any;
            /**
                * 持有者死亡时掉落
                *
                * 物品是否会在携带者死亡时掉落地面
                */
            discard_when_dead: boolean;
            /**
                * 不透明度
                */
            material_alpha: number;
            /**
                * 材质变色强度
                */
            material_color_intensity: number;
            /**
                * 自动使用
                *
                * 勾选后获得该物品时会自动使用该物品，如果不满足该物品的主动技能消耗条件则无法拾取
                */
            auto_use: boolean;
            /**
                * 名称显示方式
                */
            item_billboard_type: any;
            /**
                * 菲涅尔指数
                */
            fresnel_exp: number;
            /**
                * 模型
                *
                * 物品掉落在地面的模型
                */
            model: any;
            /**
                * 等级
                *
                * 物品的等级
                */
            level: number;
            /**
                * 基础材质变色
                */
            base_tint_color: any;
            /**
                * CD组
                *
                * 该物品所在的CD组，物品使用时会使单位持有的相同CD组内所有物品进入使用物品的主动技能冷却
                */
            cd_type: string;
            /**
                * 材质颜色叠加类型
                */
            base_color_mod: any;
            /**
                * 生命值
                *
                * 物品的生命值，生命值归零则会被销毁
                */
            hp_max: number;
            /**
                * 使用消耗次数
                *
                * 物品是堆叠类型时，每次使用该物品消耗的堆叠层数
                */
            use_consume: number;
            /**
                * 最大充能数
                *
                * 物品可以设置的最大充能层数
                */
            maximum_charging: number;
            /**
                * 玩家自定义
                */
            kv: any;
            /**
                * 出售获得资源
                *
                * 出售到商店时获得的资源
                */
            sell_res_list: any[];
            /**
                * 购买所需资源
                *
                * 从商店里购买这件物品所需要的资源
                */
            buy_res_list: any[];
            /**
                * 可以被抵押
                *
                * 是否可以将该物品出售到商店
                */
            sale_enable: boolean;
            /**
                * 物品标签
                *
                * 用于对物体的分类处理。为单位贴上标签后可以对其进行更方便的关系，例如编写游戏逻辑：杀死所有拥有XX标签的单位
                */
            tags: any[];
            /**
                * 默认堆叠数
                */
            cur_stack: number;
            /**
                * 材质变化颜色
                */
            material_color: any;
            /**
                * 最大堆叠
                *
                * 物品可以叠加的最大堆叠层数。重复获得物品时，在不大于该值的情况下物品会自动堆叠。
                */
            maximum_stacking: number;
            /**
                * 模型不透明度
                */
            model_opacity: number;
            /**
                * 最大库存
                *
                * 物品作为商品时在商店中的最大可购买数
                */
            max_stock: number;
            /**
                * 编辑器后缀
                *
                * 在编辑器下显示在名字后面的后缀，在游戏内不显示
                */
            suffix: string;
            /**
                * 名称
                */
            name: string;
            /**
                * 默认充能数
                */
            cur_charge: number;
            /**
                * 是否启用基础材质变色
                */
            use_base_tint_color: boolean;
            /**
                * 材质变化
                */
            material_change: any;
            /**
                * 尺寸
                *
                * 物品模型的缩放比例
                */
            body_size: number;
    }
}

declare module 'y3-helper/editor_meta/modifier' {
    export interface ModifierData {
            /**
                * UID
                */
            uid: string;
            /**
                * 是否影响自己
                */
            is_influence_self: boolean;
            /**
                * 材质变色强度
                */
            material_color_intensity: number;
            /**
                * 最大持续时间
                */
            get_effect_list: any;
            /**
                * 最大持续时间
                */
            attach_model_list: any;
            /**
                * 同源覆盖
                */
            same_origin_cover: boolean;
            /**
                * 不影响单位标签
                */
            ign_inf_unit_tag: any[];
            /**
                * 护盾类型
                */
            shield_type: any;
            /**
                * 目标允许
                */
            target_allow: any;
            /**
                * 图标
                */
            modifier_icon: any;
            /**
                * 最大持续时间
                */
            lose_effect_list: any;
            /**
                * 声音事件列表
                */
            sound_event_list: any[];
            /**
                * 效果影响
                */
            modifier_effect: any;
            /**
                * 覆盖护盾变化
                */
            shield_change_of_cover: any;
            /**
                * 影响单位标签
                */
            inf_unit_tag: any[];
            /**
                * 描述
                */
            description: string;
            /**
                * 覆盖类型
                */
            modifier_cover_type: any;
            /**
                * 覆盖层数变化
                */
            layer_change_of_cover: any;
            /**
                * 标签
                */
            tags: any[];
            /**
                * 不透明度
                */
            material_alpha: number;
            /**
                * 基础材质变色
                */
            material_color: any;
            /**
                * 层数上限
                */
            layer_max: number;
            /**
                * 效果类别
                */
            modifier_type: any;
            /**
                * 循环周期
                */
            cycle_time: number;
            /**
                * 不影响单位类型
                */
            ign_inf_unit_type: any;
            /**
                * 名称
                */
            name: string;
            /**
                * 是否死亡时消失
                */
            disappear_when_dead: boolean;
            /**
                * 编辑器后缀
                */
            suffix: string;
            /**
                * 光环效果
                */
            halo_effect: any;
            /**
                * 影响范围
                */
            influence_rng: number;
            /**
                * ID
                */
            key: number;
            /**
                * 玩家自定义
                */
            kv: any;
            /**
                * 覆盖时间变化
                */
            time_change_of_cover: any;
            /**
                * 显示图标
                */
            show_on_ui: boolean;
            /**
                * 材质变化
                */
            material_change: any;
            /**
                * 护盾值
                */
            shield_value: number;
    }
}

declare module 'y3-helper/editor_meta/projectile' {
    export interface ProjectileData {
            /**
                * 字符串ID
                */
            uid: string;
            /**
                * 描述
                */
            description: string;
            /**
                * 敌方特效
                */
            effect_foes: any;
            /**
                * 可移动通道
                *
                * 对单位移动类型的补充，决定单位究竟是在哪些通道移动。任意通道被碰撞阻挡该单位均无法通过。
                */
            move_limitation: any;
            /**
                * ID
                */
            key: number;
            /**
                * 标签
                */
            tags: any[];
            /**
                * 移动类型
                *
                * 单位的移动类型，决定单位究竟是在地面移动还是在空中移动。
                */
            move_channel: any;
            /**
                * 图标
                */
            icon: any;
            /**
                * 是否立即移除表现
                */
            effect_destroy_way_is_immediately: boolean;
            /**
                * 声音事件列表
                */
            sound_event_list: any[];
            /**
                * 是否循环播放
                */
            sfx_loop: boolean;
            /**
                * 最大持续时间
                */
            max_duration: number;
            /**
                * 玩家自定义
                */
            kv: any;
            /**
                * 名称
                */
            name: string;
            /**
                * 特效配置
                */
            effect_friend: any;
            /**
                * 编辑器后缀
                */
            suffix: string;
            /**
                * 区分敌我特效显示
                */
            async_effect: boolean;
    }
}

declare module 'y3-helper/editor_meta/tech' {
    export interface TechData {
            /**
                * UID
                */
            uid: string;
            /**
                * 影响单位标签
                */
            affect_tags: any[];
            /**
                * 描述信息
                */
            description: string;
            /**
                * 编辑器后缀
                *
                * 在编辑器下显示在名字后面的后缀，在游戏内不显示
                */
            suffix: string;
            /**
                * 玩家自定义
                */
            kv: any;
            /**
                * 影响全部单位
                */
            affect_all: boolean;
            /**
                * 名称
                */
            name: string;
            /**
                * ID
                *
                * 单位的唯一表示
                */
            key: number;
            /**
                * 应用科技
                */
            cells: any;
            /**
                * 标签
                */
            tags: any[];
            /**
                * 最大等级
                */
            max_lv: number;
    }
}

declare module 'y3-helper/tools/download' {
    import * as https from 'https';
    export function download(options: string | URL | https.RequestOptions): Promise<Buffer>;
}

declare module 'y3-helper/tools/log' {
    import * as vscode from 'vscode';
    let log: vscode.LogOutputChannel;
    export { log };
}

declare module 'y3-helper/tools/fs' {
    import * as vscode from 'vscode';
    class File {
            write(data: Uint8Array): this;
            get buffer(): Buffer;
            get string(): string;
    }
    export function readFile(uri: vscode.Uri | string, relativePath?: string): Promise<File | undefined>;
    export function writeFile(uri: vscode.Uri | string, relativePath: string | undefined, data: string): Promise<boolean>;
    export function writeFile(uri: vscode.Uri | string, data: string): Promise<boolean>;
    interface DeleteOptions {
            /**
                * 递归删除文件夹
                */
            recursive?: boolean;
            /**
                * 尝试移动到回收站
                */
            useTrash?: boolean;
    }
    export function removeFile(uri: vscode.Uri | string, options?: DeleteOptions): Promise<boolean>;
    export function removeFile(uri: vscode.Uri | string, relativePath?: string, options?: DeleteOptions): Promise<boolean>;
    export function dir(uri: vscode.Uri | string, relativePath?: string): Promise<[string, vscode.FileType][]>;
    export function scan(uri: vscode.Uri | string, relativePath?: string): Promise<[string, vscode.FileType][]>;
    export function stat(uri: vscode.Uri | string, relativePath?: string): Promise<vscode.FileStat | undefined>;
    export function isFile(uri: vscode.Uri | string, relativePath?: string): Promise<boolean>;
    export function isDirectory(uri: vscode.Uri | string, relativePath?: string): Promise<boolean>;
    export function isExists(uri: vscode.Uri | string, relativePath?: string): Promise<boolean>;
    interface CopyOptions {
            overwrite?: boolean;
            recursive?: boolean;
            nameMap?: string;
            pattern?: RegExp;
    }
    export function copy(source: vscode.Uri | string, target: vscode.Uri | string, options?: CopyOptions): Promise<boolean>;
    export function isRelativePath(path: string): boolean;
    export function isAbsolutePath(path: string): boolean;
    export {};
}

declare module 'y3-helper/tools/json' {
    import * as jsonc from 'jsonc-parser';
    export type Item = string | boolean | number | null | Object | Array;
    export type Array = Item[];
    export type Object = {
        [key: string]: Item;
    };
    export class Json {
        constructor(text: string);
        get text(): string;
        get data(): Object | undefined;
        get tree(): jsonc.Node | undefined;
        get(key: string): Item | undefined;
        set(key: string, value: any): boolean;
    }
}

